{
  "_args": [
    [
      {
        "raw": "react-native-platform-touchable@^1.1.1",
        "scope": null,
        "escapedName": "react-native-platform-touchable",
        "name": "react-native-platform-touchable",
        "rawSpec": "^1.1.1",
        "spec": ">=1.1.1 <2.0.0",
        "type": "range"
      },
      "/Users/adam/code/universe/apps/new-project-template/node_modules/@expo/samples"
    ]
  ],
  "_from": "react-native-platform-touchable@>=1.1.1 <2.0.0",
  "_id": "react-native-platform-touchable@1.1.1",
  "_inCache": true,
  "_location": "/react-native-platform-touchable",
  "_nodeVersion": "7.9.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-native-platform-touchable-1.1.1.tgz_1498941729633_0.34508981509134173"
  },
  "_npmUser": {
    "name": "brentvatne",
    "email": "brentvatne@gmail.com"
  },
  "_npmVersion": "4.6.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-native-platform-touchable@^1.1.1",
    "scope": null,
    "escapedName": "react-native-platform-touchable",
    "name": "react-native-platform-touchable",
    "rawSpec": "^1.1.1",
    "spec": ">=1.1.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@expo/samples"
  ],
  "_resolved": "https://registry.npmjs.org/react-native-platform-touchable/-/react-native-platform-touchable-1.1.1.tgz",
  "_shasum": "fde4acc65eea585d28b164d0c3716a42129a68e4",
  "_shrinkwrap": null,
  "_spec": "react-native-platform-touchable@^1.1.1",
  "_where": "/Users/adam/code/universe/apps/new-project-template/node_modules/@expo/samples",
  "author": {
    "name": "Brent Vatne",
    "email": "brent@expo.io"
  },
  "dependencies": {},
  "description": "Uses TouchableNativeFeedback where possible and fallback to alternatives where not.",
  "devDependencies": {
    "eslint": "^4.1.1",
    "eslint-config-react-native-prettier": "^1.0.1"
  },
  "directories": {},
  "dist": {
    "shasum": "fde4acc65eea585d28b164d0c3716a42129a68e4",
    "tarball": "https://registry.npmjs.org/react-native-platform-touchable/-/react-native-platform-touchable-1.1.1.tgz"
  },
  "files": [
    "PlatformTouchable.js"
  ],
  "gitHead": "c2dbd497310604da42cbaf3e5731b24d8e21edbd",
  "keywords": [
    "react-native",
    "react"
  ],
  "license": "MIT",
  "main": "PlatformTouchable.js",
  "maintainers": [
    {
      "name": "brentvatne",
      "email": "brentvatne@gmail.com"
    }
  ],
  "name": "react-native-platform-touchable",
  "optionalDependencies": {},
  "readme": "# `<Touchable>`\n\nA wrapper around the various `Touchable*` components built into React Native core in order to use `TouchableNativeFeedback` whenever possible, provide an easier interface to using it, and flatten out API differences between the Touchable components.\n\n- iOS: Defaults to `TouchableOpacity` with default `activeOpacity`.\n- Android: Defaults to `TouchableNativeFeedback` with background from Android app style, unless Android API <= 20 / Android < 5.0, then defaults to `TouchableOpacity`.\n- `Touchable` requires exactly one child, for example:\n\n  ```javascript\n  // Good\n  <Touchable>\n    <Child>\n      <GrandChild />\n      <GrandChild />\n    </Child>\n  </Touchable>\n\n  // Bad\n  <Touchable>\n    <Child />\n    <Child />\n  </Touchable>\n  ```\n\n## Usage\n\n```\nnpm i react-native-platform-touchable --save\n\n # or\n\nyarn add react-native-platform-touchable\n```\n\n```javascript\nimport React from 'react';\nimport { Text, View } from 'react-native';\nimport Touchable from 'react-native-platform-touchable';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Touchable\n          onPress={() => console.log('hello!')}\n          style={{\n            backgroundColor: '#eee',\n            paddingVertical: 30,\n            paddingHorizontal: 80,\n          }}\n          background={Touchable.Ripple('blue')}>\n          <Text>Hello there!</Text>\n        </Touchable>\n      </View>\n    );\n  }\n}\n```\n\n## Statics\n\n- `Touchable.SelectableBackground()` - creates an object that represents android theme's default background for selectable elements\n- `Touchable.SelectableBackgroundBorderless()` - creates an object that represent android theme's default background for borderless selectable elements.\n- `Touchable.Ripple(color: string, borderless: boolean)` - creates an object that represents ripple drawable with specified color (as a string). If property borderless evaluates to true the ripple will render outside of the view bounds.\n\n## props\n\nYou can use the same props as you would use on `TouchableOpacity`, `TouchableHighlight`, `TouchableNativeFeedback`, and `TouchableWithoutFeedback`. Listed below.\n\n- `fallback` - If `TouchableNativeFeedback` is not available (on iOS and on Android API <= 20 / Android < 5.0), the component specified in this prop is used instead. Defaults to `TouchableOpacity`.\n\n- `hitSlop` - use this! pass in an object of the format `{ top: number, left: number, right: number, bottom: bottom }`, this makes the `Touchable` easier to press by expanding the touchable area by the number of points that you specify on each side, without having to change the layout of the `Touchable`, eg: by adding padding.\n- `onPress` - fired when you press (touch in, release within bounds).\n- `onPressIn` - fired immediately on press in (like `onmousedown` on web)\n- `onPressOut` - fired immediately on press out (like `onmouseout` on web)\n- `onLongPress` -   fired when you press and hold.\n- `delayLongPress` - time to wait for `onLongPress` to fire.\n- `delayPressIn` - time to wait for `onPressIn` to fire\n- `delayPressOut` - time to wait for `onPressOut` to fire\n- `disabled` - default `false`, when `true` the button is disabled.\n- `onLayout` - see [onLayout documentation on View](http://facebook.github.io/react-native/releases/0.45/docs/view.html#onlayout)\n- `accessibilityComponentType` - see [Accessibility guide](https://facebook.github.io/react-native/docs/accessibility.html)\n- `accessibilityTraits` - see [Accessibility guide](https://facebook.github.io/react-native/docs/accessibility.html)\n- `pressRetentionOffset` - see [React Native\n  documentation](https://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#pressretentionoffset).\n\n### Additional props used by TouchableOpacity (default iOS)\n\n- `activeOpacity` - sets the opacity to animate to when touch is active.\n\n### Additional props used by TouchableNativeFeedback  (default Android)\n\n- `background` - customize the touch effect with `Touchable.SelectableBackground`, `SelectableBackgroundBorderless`, or `Touchable.Ripple(color: string, borderless: boolean)`.\n- `foreground` - same as `background`, should be used instead of background if the `Touchable` has any images as children and you want the ripple to be rendered above the image (if the image is not opaque, `background` will not be visibl, you must use foreground)\n\n### Additional props used by TouchableHighlight\n\n- `underlayColor` - the color of the background when touch is active.\n- `onHideUnderlay` - fired immediately after the underlay is hidden\n- `onShowUnderlay` - fired immediately after the underlay is shown\n\n## Rounded corners on Touchables with TouchableNativeFeedback behavior\n\n- See [this example on Snack](https://snack.expo.io/B1ENztH4-) that demonstrates how to have `Touchable` with `TouchableNativeFeedback` behavior respect rounded corners from `borderRadius`.\n",
  "readmeFilename": "README.md",
  "scripts": {
    "lint": "eslint .",
    "prettier": "eslint . --fix"
  },
  "version": "1.1.1"
}
